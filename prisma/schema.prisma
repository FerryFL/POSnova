// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider  = "postgresql"
    url       = env("DATABASE_URL")
    directUrl = env("DIRECT_URL")
}

model Profile {
    id        String   @id @default(uuid())
    email     String?  @unique
    name      String?
    createdAt DateTime @default(now())
    updatedAt DateTime @default(now()) @updatedAt

    UMKM   UMKM?   @relation(fields: [UMKMId], references: [id])
    UMKMId String?

    UserRole UserRole[]
}

model Role {
    id        String   @id @default(uuid())
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @default(now()) @updatedAt

    UserRole UserRole[]
}

model UserRole {
    id     String @id @default(uuid())
    userId String

    createdAt DateTime @default(now())
    updatedAt DateTime @default(now()) @updatedAt

    role   Role   @relation(fields: [roleId], references: [id], onDelete: Cascade)
    roleId String

    Profile   Profile? @relation(fields: [profileId], references: [id], onDelete: Cascade)
    profileId String?

    @@unique([userId, roleId])
}

model Kategori {
    id        String   @id @default(uuid())
    nama      String
    status    Boolean  @default(false)
    createdAt DateTime @default(now())
    updatedAt DateTime @default(now()) @updatedAt

    Produk Produk[]

    UMKM   UMKM?   @relation(fields: [UMKMId], references: [id])
    UMKMId String?
}

model Varian {
    id        String   @id @default(uuid())
    nama      String
    status    Boolean  @default(false)
    createdAt DateTime @default(now())
    updatedAt DateTime @default(now()) @updatedAt

    // Produk       Produk[]
    ProdukVarian ProdukVarian[]

    UMKM   UMKM?   @relation(fields: [UMKMId], references: [id])
    UMKMId String?
}

model Produk {
    id        String   @id @default(uuid())
    nama      String
    harga     Int
    gambar    String
    stok      Int      @default(0)
    status    Boolean  @default(false)
    createdAt DateTime @default(now())
    updatedAt DateTime @default(now()) @updatedAt

    kategoriId String
    kategori   Kategori @relation(fields: [kategoriId], references: [id])
    // varian       Varian         @relation(fields: [varianId], references: [id])

    ProdukVarian ProdukVarian[]

    UMKM   UMKM?   @relation(fields: [UMKMId], references: [id])
    UMKMId String?

    TransaksiItem TransaksiItem[]
}

model ProdukVarian {
    produk   Produk @relation(fields: [produkId], references: [id], onDelete: Cascade)
    produkId String

    varian   Varian @relation(fields: [varianId], references: [id], onDelete: Cascade)
    varianId String

    @@id([produkId, varianId])
}

model UMKM {
    id        String   @id @default(uuid())
    nama      String
    alamat    String
    noTelp    String
    createdAt DateTime @default(now())
    updatedAt DateTime @default(now()) @updatedAt

    Kategori  Kategori[]
    Produk    Produk[]
    Varian    Varian[]
    Profile   Profile[]
    Transaksi Transaksi[]
}

model Transaksi {
    id               String   @id @default(uuid())
    tanggalTransaksi DateTime @default(now())
    totalHarga       Int
    totalProduk      Int
    pajakPersen      Int?
    pajakNominal     Int?
    grandTotal       Int?

    createdAt DateTime @default(now())
    updatedAt DateTime @default(now()) @updatedAt
    createdBy String?

    transaksiItem TransaksiItem[]

    UMKM   UMKM?   @relation(fields: [UMKMId], references: [id])
    UMKMId String?
}

model TransaksiItem {
    id          String   @id @default(uuid())
    jumlah      Int
    hargaSatuan Int
    hargaTotal  Int
    varianId    String?
    varianNama  String?
    createdAt   DateTime @default(now())

    transaksi   Transaksi @relation(fields: [transaksiId], references: [id], onDelete: Cascade)
    transaksiId String

    produk   Produk @relation(fields: [produkId], references: [id])
    produkId String
}
